<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<author email="erik.dannenberg@bbe-consulting.de">
			Erik Dannenberg
		</author>
		<title>Unit Testing and Magento TDD - Mavento</title>
	</properties>
	<meta name="keyword" content="mavento, maven, magento, unit tests, integration tests" />
	<body>
		<section name="Unit Tests, TDD">
			<subsection name="Overview">
				<p>
					All test cases are in
					<b>/src/test/php</b>
					. Standard PHPUnit stuff. The archetypes are currently configured
					to
					include and setup the <b>ecomdev-phpunit</b> extension. If you prefer
					something else you would just need to remove ecomdev-phpunit from the
					dependencies block in your pom.xml. Then if you lets say want to use MageTest
					from ibuildinds or your own brew you either just add the extension key
					from Magento Connect to your profile
					or create a maven artifact and list it in your dependency section.
					A maven artifact of the latest <b>ibuildings_magetest</b> can be found in the Mavento
					<a href="http://maven.bbe-consulting.de/index.html#view-repositories;releases~browsestorage" target="_blank">repository</a> .
					<br />
					<br />

					Per default all unit tests will run in a temporary Magento instance that
					only lives in the projects build directory (/target per default). The plugin supports
					multiple Magento versions for testing, coexisting at the same time.
					This temp directory will then get linked to your htdocs dir. We will also need another 
					database for the fixture support of the ecomdev extension. There is no setup
					needed for ecomdev_phpunit, besides creating the fixture db if you don't use
					a mysql super user.<br/><br/>
					
					Again conventions can make your life easy, in fact there is no configuration needed
					for the test instance if you comply with the convention.
					Let's say you configured only these 2 base properties in your dev profile: 
					
					<ul>
					<li>magento.root.local = /home/data/www/mymagento </li>
					<li>magento.db.name = magento_mymagento</li>
					</ul>
					
					The plugin would apply the following defaults:
					
					<ul>
					<li>magento.url.base = http://127.0.0.1/mymagento/</li>
					<li>magento.test.root.link = /home/data/www/mymagento<b>_it</b></li>
					<li>magento.test.url.base = http://127.0.0.1/mymagento<b>_it</b>/</li>
					<li>magento.test.db.name = magento_mymagento<b>_it</b></li>
					<li>magento.test.fixture.db.name = magento_mymagento<b>_it_fixture</b></li>
					</ul>
					
					The <b>_it</b> part stands for integration test. Not only does this save a good chunk of config, it also encourages a consistent naming scheme across your projects. 
					<br/><br/>
					
					But let's run some tests, first enable tests again by setting:
					
					<source>
skipTests</source>
					
					to <b>false</b> in your pom.xml. If you don't use a mysql super user on your dev box create the
					2 databases and grant permissions to the mysql user you are using. Then run:
					
					<source>
mvn clean test</source>

					This will first clean the project's build directory, then setup a Magento test instance
					with all dependencies and finally run the unit tests. If you want to reuse
					an existing test instance leave out the clean phase for the next calls.<br/><br/>
					
					To get you started the sample modules come with examples for model and controller tests 
					via ecomdev_phpunit.
					<br />
				</p>
			</subsection>

			<subsection name="Testing against snapshots">
				<p>
					Often running unit tests against a vanilla Magento is not enough
					and in most cases
					it would be painfull to reconstruct a Magento live shop via pom.xml
					configuration.
					<br />

					In these cases you can use the

					<source>
mvn magento:artifact -DmagentoPath=/path/to/live_store</source>

					goal to create a custom Magento artifact from a running Magento
					instance.
					This goal does not require an active project so you can run it from
					wherever you like.
					<br />
					<br />

					Per default the plugin will try to truncate the Magento logging tables in a
					temp db before doing the final dump. If you are already working on
					a backup you can use -DskipTempDb to truncate directly in the
					source database. It's also possible to truncate all customer/order data.
					Have a look at the <a href="http://mavento.bbe-consulting.de/artifact-mojo.html">magento:artifact</a>
					documentation for full details.<br/><br/>
					
					The <a href="http://mavento.bbe-consulting.de/info-mojo.html">magento:info</a> goal can give 
					you a quick overview how much truncating the log tables will net you on a particular Magento instance.
					<br/><br/>

					The plugin will copy the specified folder, read out and then
					scramble sensitive information like database settings in local.xml,
					create a sql dump and then finally jar it all up nicely into a
					format usable by the maven-magento-plugin.
					<br />
					<br />

					To be able to use it in your projects you need to install the
					created jar into your local or remote Maven repository first.
					The plugin will output a snippet for local install:

					<source>
[INFO] mvn install:install-file -Dpackaging=jar -Dfile=live_store-20120202010934-SNAPSHOT.jar -Dversion=20120202010934-SNAPSHOT -DgroupId= -DartifactId=</source>

					Don't forget to fill out the
					<b>artifactId</b>
					and
					<b>groupId</b>
					values.
					<br />
					<br />

					Finally lets use our shiny new custom Magento artifact, open the
					pom.xml and add the following properties to the dev profile:

					<macro name="snippet">
						<param name="id" value="pomArtifactSettings" />
						<param name="file" value="src/site/include/pomArtifactSettings.xml" />
					</macro>

					Those tell the Magento plugin which Maven artifact to use for
					setting up Magento instances.
					Change the artifactId/groupId/version as needed, if you want to use the
					artifact for both local Magento instances
					and integration tests you just need to change the first three
					properties, as per default the
					<b>magento.test.artifact.*</b>
					properties mirror the values from
					<b>magento.artifact.*</b>
					<br />
					<br />

					Note that
					<b>magento.artifact.version</b>
					does not need to match the actual Magento version, as it refers to
					the Maven
					artifact version. You have to make sure though that
					<b>magento.version</b>
					reflects the actual Magento version
					of the custom artifact.
					<br />
					<br />

					Whenever you invoke the magento:setup or test goals now the
					plugin will use the snapshot you just created,
					it will take care of modifying the baseurl/db settings according to
					your pom.xml as usual.
				</p>
			</subsection>

		</section>
	</body>
</document>
