<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<author email="erik.dannenberg@bbe-consulting.de">
			Erik Dannenberg
		</author>
		<title>Magento - Plugin</title>
	</properties>
	<meta name="keyword" content="mavento, maven, magento, development, magento deployment, build tool" />
	<body>
		<section name="Single Module Development">
			<subsection name="Hello Mavento!">
			<p>
			Lets say you need to write a Magento module for managing some stuff in the Magento backend.<br/>
			Fire up a shell and navigate to a directory where you would like to create your new project,
			then type:
			
			<source>
mvn magento:archetype</source>
			
			If this is the first time you are running Maven it will download alot of dependencies now,
			don't worry the next calls will be much smoother.<br/>
			When Maven is ready it will present you a list of archetypes, think of it as project templates. 
			Let's just hit enter and go with the default, the <b>magento-sample-module-archetype</b>.<br/>
			Maven will ask for basic project properties now. Some properties like version have a default value (1.0-SNAPSHOT)
			in which case you can hit enter to accept.
			
			<source>
Define value for property 'groupId': de.bbe-consulting.magento: 
Define value for property 'artifactId': : stuff-manager
Define value for property 'version': 1.0-SNAPSHOT: 
Define value for property 'magentoModuleName': : StuffManager
Define value for property 'magentoNamespace': : MyCompany
Define value for property 'magentoModuleType: local:</source>
			
			<ul>
			<li>groupId - The Maven namespace of the project, usually the url of your company to avoid namespace collisions. 
				This will also define the folder structure in the Maven repository.</li>
			<li>artifactId - The Maven artifactId, the created project folder will have the same name.</li>
			<li>version - SNAPSHOT versions are development versions in the Maven world.</li>
			<li>magentoModuleName - The Magento module name.</li>
			<li>magentoNameSpace - Same as above but for the Magento namespace of the module.</li>
			<li>magentoModuleType - Local or community, local is default.</li>
			</ul>
			
			Magento naming conventions apply to <b>magentoModuleName</b> and <b>magentoNameSpace</b>. (CamelCase, no underscores)
			
			Your new project should be ready now. Lets have a look at it:
			 
			<source>
[~/workspace]$ cd stuff-manager/
[~/workspace/stuff-manager]$ tree
.
|-- license.header
|-- pom.xml
`-- src
    |-- main
    |   |-- assembly
    |   |   `-- config.xml
    |   `-- php
    |       |-- app
    |       |   |-- code
    |       |   |   `-- local
    |       |   |       `-- MyCompany
    |       |   |           `-- StuffManager
    |       |   |               |-- Block
    |       |   |               |   `-- Adminhtml
    |       |   |               |       `-- MyBlock.php
    |       |   |               |-- controllers
    |       |   |               |   `-- Adminhtml
    |       |   |               |       `-- MyController.php
    |       |   |               |-- etc
    |       |   |               |   |-- api.xml
    |       |   |               |   |-- config.xml
    |       |   |               |   `-- wsdl.xml
    |       |   |               |-- Helper
    |       |   |               |   `-- Data.php
    |       |   |               |-- Model
    |       |   |               |   |-- Api
    |       |   |               |   |   |-- Resource.php
    |       |   |               |   |   `-- V2.php
    |       |   |               |   |-- Api.php
    |       |   |               |   |-- Entity
    |       |   |               |   |   `-- Setup.php
    |       |   |               |   |-- MyModel.php
    |       |   |               |   `-- Mysql4
    |       |   |               |       |-- MyModel
    |       |   |               |       |   `-- Collection.php
    |       |   |               |       `-- MyModel.php
    |       |   |               `-- sql
    |       |   |                   `-- stuffmanager_setup
    |       |   |                       `-- mysql4-install-0.0.1.php
	.
	.
	.</source>
			
			All source files are in <b>/src/main/php</b>, as we picked the sample module archetype it includes a ready to run Magento module.
			<br/>
			
			Note that the values you entered for ModuleNameSpace/Name were applied to the directory structure.
			<br/><br/>
			
			But before we try it out lets setup our development environment real quick.<br/>
			Open the pom.xml file in the project root directory. POM stands for project object model and is Maven's project configuration, 
			scroll a bit down until you see the profiles section:
			
			<macro name="snippet">
				<param name="id" value="pomSettings"/>
				<param name="file" value="src/site/include/pomSettings.xml"/>
			</macro>
			
			Profiles are configuration sets that can be either triggered manually, or by conditions like the current operating system
			the build is running on. The first one, displayed above, is a typical profile for developer use. There is no need to configure
			a lot as the plugin's conventions are geared toward development. The plugin will disable all caches, 
			turn on logging and enable exception printing per default. 
			<br/><br/>
			
			The production profile, a bit further down, shows how to setup a profile for a live environment. It's only a simple
			example to show some concepts though. Finally there is also a profile to setup
			a seperate minimal Magento with the magento db repair tool installed. Quite handy for Magento upgrade sessions.
			<br/><br/>
			
			The dev profile is active per default, to activate other profiles you can use the -P parameter:
			
			<source>
mvn somecommand -Pproduction</source> 
			
			Below the profiles section is global properties section.
			As the name suggests, these properties are active in all profiles unless, of course, they get overridden by an active profile.
			More details on profiles can be found in the Maven 
			<a href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html" target="_blank">documentation</a>. 
			<br/><br/>
			
			Configure the magento root folder and db settings in the dev profile, the convention for the Magento baseUrl
			is to use the root folder name configured in <b>magento.root.local</b>. So the baseUrl for our dev profile from above
			will default to:
			<source>
http://127.0.0.1/stuffmanager/</source>

			..unless we add the magento.url.base property and override. Finally set:
			
			<ul>
			<li>skipTests</li>
			</ul>
			  
			..to <b>true</b> for now. It will disable all unit tests. We will dive into that in the unit tests section.
			
			You can set the Magento version via:
			<ul>
			<li>magento.version - See <b><a href="http://maven.bbe-consulting.de/content/repositories/releases/com/varien/magento/">here</a></b> for available versions. It should always reflect the actual Magento version.</li>
			</ul>
			
			There is a lot more stuff you configure on how the Magento instance should get configured. You could specify Magento Connect extension keys to be installed
			or set any values in core_config_data. Have a look at the global properties section in your pom.xml for some 
			examples or visit the <b><a href="../setup-mojo.html" target="_blank">magento:setup</a></b> documentation for a full overview.
			<br/><br/>
			
			Once you are done it's time to setup the local Magento instance:
			
			<source>
mvn magento:setup</source>
			
			This will setup a Magento instance based on the active configuration and copy it to the path you put in <b>magento.root.local</b>. 
			
			You can then invoke:
			
			<source>
mvn package magento:deploy</source>
			
			..which will run a LINT check on the project source, create a .phar and .zip file of the sources and then deploy the artifact to 
			the previously setup Magento instance.
			<br/>
			
			If you now login to the Magento backend you should see the StuffManager menu.
			
			All that is left to do is import the project into the IDE of your choice and you are ready to start hacking. :o)
			</p>
		</subsection>
		<subsection name="Symlinking">
			<p>
			Sometimes it can be annoying having to run package/deploy every time you made a change to the sources. 
			In these cases you can invoke..
			
			<source>
mvn magento:symlink</source>

			..to symlink the project source folders to your Magento instance. Strg-s + f5 will work again. :D<br/>
			Note that the plugin will not just link src/main/php, it tries to guess the most sensible links instead. Manual symlink configuration should not be necessary.
			<br/>
			
			<b>NOTE</b>: There is symlink protection for template files in Magento versions 1.4.2.0 until 1.5.1.0, where Varien finally made it configurable.
			</p>
		</subsection>
		
		<subsection name="Optional: IDE integration">
			<p>
			Eclipse, Netbeans, IntelliJ and others provide Maven integration. Check your IDE's manual/plugin repo.
			</p>
		</subsection>
		
		</section>

	</body>
</document>